[
  {
    "path": "posts/2022-05-12-downloading-protein-and-dna-sequences-with-the-rentrez-package/",
    "title": "Downloading protein and DNA sequences with the rentrez package",
    "description": "`rentrez` is a fast and easy way to access biological sequence databases.",
    "author": [
      {
        "name": "Nathan L. Brouwer",
        "url": {}
      }
    ],
    "date": "2022-05-12",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n–>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDownloading macro-molecular sequences\n\n\n\nIn this post we’ll download protein sequences from the shroom family of genes and prepare them for use in sequence alignment. For background on shroom and sequence alignments, see the previous post “Understanding the evolutionary history of a gene with phylogenetic trees.”\nMost biologists download sequences directly from where they reside on internet, such as the National Center For Biotechnology Information (NCBI) websites. In contrast, we’ll use a function, entrez_fretch(), which accesses NCBI’s Entrez system of database (ncbi.nlm.nih.gov/search/). This function is from the rentrez package, which stands for “R-Entrez.”\nTo work through the code in this post and use entrez_fetch(), you’ll need to download the package rentrez\n\n\ninstall.packages(\"rentrez\")\n\n\n\nWe need to tell entrez_fetch() several things\ndb = ... the type of entrez database.\nid = ... the accession (ID) number of the sequence\nrettype = ... file type what we want the function to return.\nFormally, these things are called arguments by R.\nWe’ll use these settings:\ndb = \"protein\" to access the Entrez database of protein sequences\nrettype = \"fasta\", which is a standard file format for nucleic acid and protein sequences\nWe’ll set id = ... to sequences whose accession numbers are:\nNP_065910: Human shroom 3\nAAF13269: Mouse shroom 3a\nCAA58534: Human shroom 2\nXP_783573: Sea urchin shroom\nNormally we’d have to download these sequences by hand through pointing and clicking on GeneBank records on the NCBI website. In R we can do it automatically; this might take a second.\nAll the code needed is this:\n\n\n# Human shroom 3 (H. sapiens)\nhShroom3 <- rentrez::entrez_fetch(db = \"protein\", \n                          id = \"NP_065910\", \n                          rettype = \"fasta\")\n\n\n\n\n\n\n\n\n\n\nThe output is in FASTA format. We can look at the raw output by calling up the object we created. This will run as single continuous string of characters without line breaks\n\n\nhShroom3\n\n\n\n\n[1] \">NP_065910.3 protein Shroom3 [Homo sapiens]\\nMMRTTEDFHKPSATLNSNTATKGRYIYLEAF ...\"\n\nWe can use the cat() function to do a little formatting for us; it essentially just enforces the lines breaks:\n\n\ncat(hShroom3)\n\n\n>NP_065910.3 protein Shroom3 [Homo sapiens]\nMMRTTEDFHKPSATLNSNTATKGRYIYLEAFLEGGAPWGFTLKGGLEHGEPLIISKVEEGGKADTLSSKL\nQAGDEVVHINEVTLSSSRKEAVSLVKGSYKTLRLVVRRDVCTDPGHADTGASNFVSPEHLTSGPQHRKAA\nWSGGVKLRLKHRRSEPAGRPHSWHTTKSGEKQPDASMMQISQGMIGPPWHQSYHSSSSTSDLSNYDHAYL\nRRSPDQCSSQGSMESLEPSGAYPPCHLSPAKSTGSIDQLSHFHNKRDSAYSSFSTSSSILEYPHPGISGR\nERSGSMDNTSARGGLLEGMRQADIRYVKTVYDTRRGVSAEYEVNSSALLLQGREARASANGQGYDKWSNI\nPRGKGVPPPSWSQQCPSSLETATDNLPPKVGAPLPPARSDSYAAFRHRERPSSWSSLDQKRLCRPQANSL\nGSLKSPFIEEQLHTVLEKSPENSPPVKPKHNYTQKAQPGQPLLPTSIYPVPSLEPHFAQVPQPSVSSNGM\nLYPALAKESGYIAPQGACNKMATIDENGNQNGSGRPGFAFCQPLEHDLLSPVEKKPEATAKYVPSKVHFC\nSVPENEEDASLKRHLTPPQGNSPHSNERKSTHSNKPSSHPHSLKCPQAQAWQAGEDKRSSRLSEPWEGDF\nQEDHNANLWRRLEREGLGQSLSGNFGKTKSAFSSLQNIPESLRRHSSLELGRGTQEGYPGGRPTCAVNTK\nAEDPGRKAAPDLGSHLDRQVSYPRPEGRTGASASFNSTDPSPEEPPAPSHPHTSSLGRRGPGPGSASALQ\nGFQYGKPHCSVLEKVSKFEQREQGSQRPSVGGSGFGHNYRPHRTVSTSSTSGNDFEETKAHIRFSESAEP\nLGNGEQHFKNGELKLEEASRQPCGQQLSGGASDSGRGPQRPDARLLRSQSTFQLSSEPEREPEWRDRPGS\nPESPLLDAPFSRAYRNSIKDAQSRVLGATSFRRRDLELGAPVASRSWRPRPSSAHVGLRSPEASASASPH\nTPRERHSVTPAEGDLARPVPPAARRGARRRLTPEQKKRSYSEPEKMNEVGIVEEAEPAPLGPQRNGMRFP\nESSVADRRRLFERDGKACSTLSLSGPELKQFQQSALADYIQRKTGKRPTSAAGCSLQEPGPLRERAQSAY\nLQPGPAALEGSGLASASSLSSLREPSLQPRREATLLPATVAETQQAPRDRSSSFAGGRRLGERRRGDLLS\nGANGGTRGTQRGDETPREPSSWGARAGKSMSAEDLLERSDVLAGPVHVRSRSSPATADKRQDVLLGQDSG\nFGLVKDPCYLAGPGSRSLSCSERGQEEMLPLFHHLTPRWGGSGCKAIGDSSVPSECPGTLDHQRQASRTP\nCPRPPLAGTQGLVTDTRAAPLTPIGTPLPSAIPSGYCSQDGQTGRQPLPPYTPAMMHRSNGHTLTQPPGP\nRGCEGDGPEHGVEEGTRKRVSLPQWPPPSRAKWAHAAREDSLPEESSAPDFANLKHYQKQQSLPSLCSTS\nDPDTPLGAPSTPGRISLRISESVLRDSPPPHEDYEDEVFVRDPHPKATSSPTFEPLPPPPPPPPSQETPV\nYSMDDFPPPPPHTVCEAQLDSEDPEGPRPSFNKLSKVTIARERHMPGAAHVVGSQTLASRLQTSIKGSEA\nESTPPSFMSVHAQLAGSLGGQPAPIQTQSLSHDPVSGTQGLEKKVSPDPQKSSEDIRTEALAKEIVHQDK\nSLADILDPDSRLKTTMDLMEGLFPRDVNLLKENSVKRKAIQRTVSSSGCEGKRNEDKEAVSMLVNCPAYY\nSVSAPKAELLNKIKEMPAEVNEEEEQADVNEKKAELIGSLTHKLETLQEAKGSLLTDIKLNNALGEEVEA\nLISELCKPNEFDKYRMFIGDLDKVVNLLLSLSGRLARVENVLSGLGEDASNEERSSLYEKRKILAGQHED\nARELKENLDRRERVVLGILANYLSEEQLQDYQHFVKMKSTLLIEQRKLDDKIKLGQEQVKCLLESLPSDF\nIPKAGALALPPNLTSEPIPAGGCTFSGIFPTLTSPL\n\nNote the initial >, then the header line of NP_065910.3 protein Shroom3 [Homo sapiens]. After that is the amino acid sequence. The underlying data also includes the newline character \\n to designate where each line of amino acids stops (that is, the location of line breaks).\nWe can get the rest of the data by just changing the id = ... argument in the calls to entrez_fetch():\n\n\n# Mouse shroom 3a (M. musculus)\nmShroom3a <- rentrez::entrez_fetch(db = \"protein\", \n                          id = \"AAF13269\", \n                          rettype = \"fasta\")\n\n# Human shroom 2 (H. sapiens)\nhShroom2 <- rentrez::entrez_fetch(db = \"protein\", \n                          id = \"CAA58534\", \n                          rettype = \"fasta\")\n\n\n# Sea-urchin shroom\nsShroom <- rentrez::entrez_fetch(db = \"protein\", \n                          id = \"XP_783573\", \n                          rettype = \"fasta\")\n\n\n\nHere, I’ve pasted the function I used above three times into the code chunk and changed the id = … statement. Later in this script will avoid this clunky type of coding by using for loops.\nI’m going to check about how long each of these sequences is - each should have an at least slightly different length. If any are identical, I might have repeated an accession name or re-used an object name. The function nchar() counts of the number of characters in an R object.\n\n\nnchar(hShroom3)\n\n\n[1] 2070\n\nnchar(mShroom3a)\n\n\n[1] 2083\n\nnchar(sShroom)\n\n\n[1] 1758\n\nnchar(hShroom2)\n\n\n[1] 1673\n\nPrepping macromolecular sequences\n\n“90% of data analysis is data cleaning”\n~Just about every data analyst and data scientist\n\nWe have our sequences, but the current format isn’t directly usable for us yet because there are several things that aren’t sequence information\nMetadata (the header)\nPage formatting information (the newline character)\nWe can remove this non-sequence information using a function I wrote called fasta_cleaner(), which is in the compbio4all package. The function uses regular expressions to remove the info we don’t need.\nIf you had trouble downloading the compbio4all package function you can add fasta_cleaner() to your R session directly by running this code:\n\n\nfasta_cleaner <- function(fasta_object, parse = TRUE){\n\n  fasta_object <- sub(\"^(>)(.*?)(\\\\n)(.*)(\\\\n\\\\n)\",\"\\\\4\",fasta_object)\n  fasta_object <- gsub(\"\\n\", \"\", fasta_object)\n\n  if(parse == TRUE){\n    fasta_object <- stringr::str_split(fasta_object,\n                                       pattern = \"\",\n                                       simplify = FALSE)\n  }\n\n  return(fasta_object[[1]])\n}\n\n\n\nIf we run the name of the command with out any quotation marks we can see the code:\n\n\nfasta_cleaner\n\n\nfunction(fasta_object, parse = TRUE){\n\n  fasta_object <- sub(\"^(>)(.*?)(\\\\n)(.*)(\\\\n\\\\n)\",\"\\\\4\",fasta_object)\n  fasta_object <- gsub(\"\\n\", \"\", fasta_object)\n\n  if(parse == TRUE){\n    fasta_object <- stringr::str_split(fasta_object,\n                                       pattern = \"\",\n                                       simplify = FALSE)\n  }\n\n  return(fasta_object[[1]])\n}\n\nNow use the function to clean our sequences; don’t worry about what parse = ... is for right now.\n\n\nhShroom3  <- fasta_cleaner(hShroom3,  parse = F)\nmShroom3a <- fasta_cleaner(mShroom3a, parse = F)\nhShroom2  <- fasta_cleaner(hShroom2,  parse = F)\nsShroom   <- fasta_cleaner(sShroom,   parse = F)\n\n\n\nI wanted to do something four times, so I’ve repeated the same line of code four times with the necessary change. This gets the job done, but there are better ways to do this using for() loops.\nNow let’s take a peek at what our sequences look like:\n\n\nhShroom3\n\n\n\n\n[1] \"MMRTTEDFHKPSATLNSNTATKGRYIYLEAFLEGGAPWGFTLKGGLEHGEPLIISKVEEGGKADTLSSKLQAGDE ...\"\n\nThe header and slash-n newline characters are gone. The sequence is now ready for use by our R alignment functions.\n\n\n\n\n",
    "preview": "posts/2022-05-12-downloading-protein-and-dna-sequences-with-the-rentrez-package/US-NLM-NCBI-Logo2.png",
    "last_modified": "2022-05-12T00:56:42-04:00",
    "input_file": {},
    "preview_width": 200,
    "preview_height": 247
  },
  {
    "path": "posts/2022-05-11-understanding-the-evolutionary-history-of-a-gene-with-phylogenetic-trees/",
    "title": "Understanding the evolutionary history of a gene with phylogenetic trees",
    "description": "An outline of why and how to build evolutionary trees.",
    "author": [
      {
        "name": "Nathan L. Brouwer",
        "url": {}
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\nThe study of biology span a remarkable range of scales, from biochemical interactions at the scale of individual molecules to the functioning of the entire earth. Despite this range, three tools play an important role across many of these scales:\nDatabases of DNA and protein sequences\nAlignments of sequence data\nPhylogenetic trees depicting evolutionary relationships\nThese three are interrelated, because alignments are built from DNA and protein sequences obtained from databases, and most phylogenetic trees are now built from sequence data, typically organized as a multiple sequence alignment (MSA).\nBiochemists and molecular biologists use these tools to understand and predict the function of proteins. For example, in the late 1990s researcher Jeffrey Hildebrand identified a protein that played a key roll in the development of vertebrate central nervous systems (Hildebrand and Soriano 1999). He named the gene and protein “shroom” because when mutated the brain and skull of mice failed to form properly and bloomed out the back of their head like a fungus.\nHildebrand determined the amino acid sequence of the protein and queried a database of DNA and protein sequences to see if shroom had ever been studied before. It had in frogs, but its function was somewhat mis-characterized. Over the last 20 years, Dr. Hildebrand and other researchers have shown that shroom occurs in many organisms and plays a central role in key stages of early development prior to birth, from the formation of fruit fly wings to proper formation of the spinal cord and central nervous system. Recently, researchers have associated mutations in shroom to the incidence of the developmental disorder spina bifida (Chen et al. 2018, Deshwar et al. 2020).\nSequence databases play a key roll throughout this research for identifying other organisms that have the shroom gene (Hagens et al. 2006). Indeed, the Hildebrand lab has leveraged the occurrence of shroom in fruit flies to study what shroom does at the cellular level, determine the role of the different variants of the shroom gene and proteins that occur in many organisms (Bolinger et al. 2010), and identify what other proteins shroom interacts with (Hildebrand et al. 2021).\nMultiple sequence alignments are often used to identify the parts of proteins that are likely involved in key functions, such as binding to other proteins or carrying out chemical reactions (e.g. Mohan, Hildebrand et al. 2013). This information can then be used when interpreting results from experiments or designing studies that mutate part of a protein to change its effect or prevent it from being created entirely.\n\n\n\nFigure 1: Alignment of focal part of the protein Rock1, which binds shroom. Mohan et al. 2013 https://doi.org/10.1371/journal.pone.0081075. CC-BY\n\n\n\nPhylogenetic trees can be built from multiple sequence alignments to visualize the evolutionary relationships among genes.\nTODO: insert phylogeny\n\n\n\nIn subsequent posts, I will present a workflow for obtaining sequences, building an MSA, and creating a phylogenetic tree of the shroom gene family. Many biologist will use web-browser based tools and GUI software such as MEGA to do this (Kumar et al. 2008); we’ll do this all in a reproducible and extensible way in R.\nWe will proceed through the following steps:\nStarting with a set of published shroom gene identification numbers Mohan, Hildebrand et al. 2013, we’ll download shroom sequences using the rentrez package (Winter 2017.\nWe’ll then clean up the data a bit and explore alignments between pairs of sequences using pairwise alignments, thanks to the Biostrings package.\nNext, we’ll build a full multiple sequence alignment using (Bodenhofer et al. 2015).\nWe’ll visualize a focal section of our shroom MSA using the ggplot2 extension ggmsa.\nFinally, we’ll build a phylogenetic tree with the ape package.\nAfter this series of blog posts is complete, future posts will provide more details about the biological, computational, and R programming aspects of these methods.\nTable 1: shroom sequence identification codes (accession numbers) from Mohan, Hildebrand et al. 2013.\n\naccession\nname.orig\nname.new\nspp\nCAA78718\nX. laevis Apx\nxShroom1\nXenopus\nNP_597713\nH. sapiens APXL2\nhShroom1\nHomo\nCAA58534\nH. sapiens APXL\nhShroom2\nHomo\nABD19518\nM. musculus Apxl\nmShroom2\nMus\nAAF13269\nM. musculus ShroomL\nmShroom3a\nMus\nAAF13270\nM. musculus ShroomS\nmShroom3b\nMus\nNP_065910\nH. sapiens Shroom\nhShroom3\nHomo\nABD59319\nX. laevis Shroom-like\nxShroom3\nXenopus\nNP_065768\nH. sapiens KIAA1202\nhShroom4a\nHomo\nAAK95579\nH. sapiens SHAP-A\nhShroom4b\nHomo\nABA81834\nD. melanogaster Shroom\ndmShroom\nDrosophila\nEAA12598\nA. gambiae Shroom\nagShroom\nmosquito\nXP_392427\nA. mellifera Shroom\namShroom\nbee\nXP_783573\nS. purpuratus Shroom\nspShroom\nsea urchin\n\n\n\n\n",
    "preview": "posts/2022-05-11-understanding-the-evolutionary-history-of-a-gene-with-phylogenetic-trees/rocMSA.png",
    "last_modified": "2022-05-11T15:08:22-04:00",
    "input_file": {},
    "preview_width": 1080,
    "preview_height": 504
  }
]
